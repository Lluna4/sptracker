
# This file is part of sptracker.
#
#    sptracker is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    sptracker is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Foobar.  If not, see <http://www.gnu.org/licenses/>.

import zipfile
import glob
import os
import os.path
import shutil
import subprocess
import sys

exec(open("remote_settings.py").read())

test_release_process = False
if "--test_release_process" in sys.argv:
    sys.argv.remove("--test_release_process")
    print("Test mode, no release will be done")
    test_release_process = True

ptracker_only = False
if "--ptracker_only" in sys.argv:
    sys.argv.remove('--ptracker_only')
    ptracker_only = True
    test_release_process = True

stracker_only = False
if "--stracker_only" in sys.argv:
    sys.argv.remove('-stracker_only')
    stracker_only = True
    test_release_process = True

stracker_packager_only = False
if "--stracker_packager_only" in sys.argv:
    sys.argv.remove('--stracker_packager_only')
    stracker_packager_only = True
    test_release_process = True

linux_only = False
if "--linux_only" in sys.argv:
    sys.argv.remove('--linux_only')
    linux_only = True
    test_release_process = True
    
windows_only = False
if "--windows_only" in sys.argv:
    sys.argv.remove('--windows_only')
    windows_only = True
    test_release_process = True

if len(sys.argv) != 2:
    print ("Usage: create_release [--test_release_process] [--ptracker_only] [--stracker_only] [--linux_only] [--windows_only] [--stracker_packager_only] <version_number>")
    sys.exit(1)

if not test_release_process:
    git_status = subprocess.check_output([git, "status", "-s", "-uno"], universal_newlines=True)
    if not git_status.strip() == "":
        print ("git sandbox is dirty. Check in your changes first.")
        print (git_status)
        sys.exit(1)

version = sys.argv[1]

if not stracker_only and not linux_only:

    shutil.rmtree("dist", True)
    assert not os.path.exists("dist")

    f = open("ptracker_lib/__init__.py", "w")
    f.write("version = '%s'" % version)
    f.close()
    f = open("stracker/stracker_lib/__init__.py", "w")
    f.write("version = '%s'" % version)
    f.close()

    if not test_release_process:
        git_status = subprocess.check_output([git, "status", "-s", "-uno"], universal_newlines=True)
        if not git_status.strip() == "":    
            svn_commit = subprocess.check_output([git, "commit", "-s", "-m", "prepare release %s" % version])

    ptracker_py_files = """\
    ptracker.py
    ptracker_lib/__init__.py
    ptracker_lib/helpers.py
    ptracker_lib/acsim.py
    ptracker_lib/profiler.py
    ptracker_lib/sim_info.py
    ptracker_lib/client_server/__init__.py
    ptracker_lib/client_server/ac_client_server.py
    ptracker_lib/client_server/client_server.py
    ptracker_lib/client_server/client_server_impl.py""".split("\n")

    ptracker_pyd_files = """\
    ptracker_lib/stdlib/_ctypes.pyd
    ptracker_lib/stdlib/unicodedata.pyd
    ptracker_lib/stdlib/CreateFileHook.dll
    ptracker_lib/stdlib64/_ctypes.pyd
    ptracker_lib/stdlib64/CreateFileHook.dll""".split("\n")

    def patch_ptracker_server(files):
        files = sorted(files)
        import hashlib
        hashfun = hashlib.sha1()
        for f in files:
            hashfun.update(open(f, 'rb').read())
        nf = open("ptracker-server-dist.py", "w")
        nf.write("# automatically generated by create_release.py\n")
        nf.write("files = " + repr(files) + "\n")
        nf.write("prot = " + repr(hashfun.digest()) + "\n")
        nf.write(open("ptracker-server.py", "r").read())

    patch_ptracker_server(ptracker_py_files)

    os.environ['PYTHONPATH'] = r"..\system;..\..\system"
    print("------------------- Building ptracker.exe -------------------------------")
    assert 0 == os.system("pyinstaller --name ptracker --clean -y --onefile --windowed --paths D:\SteamLibrary\steamapps\common\assettocorsa\apps\python\system --additional-hooks-dir=stracker/pyinstaller-hooks --path stracker --path stracker/externals ptracker-server-dist.py")
    #assert 0 == os.system("python setup-ptracker-server.py py2exe")

    def checksum(buffer):
        sign = buffer[:0x12] + buffer[(0x12+4):]
        import hashlib, struct
        hashfun = hashlib.sha1()
        hashfun.update(sign)
        digest = hashfun.digest()
        e1, = struct.unpack_from('B', digest)
        p = e1*(len(digest)-4)//255
        cs = digest[p:(p+4)]
        return cs

    # patch generated .exe file with a checksum
    fexe = open("dist/ptracker.exe", "rb")
    buffer = fexe.read()
    assert buffer[0x12:(0x12+4)] == b"\x00"*4
    fexe.close()
    cs = checksum(buffer)
    buffer = buffer[:0x12] + cs + buffer[(0x12+4):]
    fexe = open("dist/ptracker.exe", "wb")
    fexe.write(buffer)
    fexe.close()

    class nsis_builder:
        def __init__(self, target, script):
            self.temp_idx = 0
            self.target = target
            self.script = script
            self.files = {}

        def unslashify(self, s):
            return s.replace('/', '\\')

        def writestr(self, target, str):
            tfile = "nsis_temp_files%d" % self.temp_idx
            self.temp_idx += 1
            open(tfile, "wb").write(str)
            self.files[self.unslashify(target)] = self.unslashify(tfile)

        def write(self, file, target):
            self.files[self.unslashify(target)] = self.unslashify(file)

        def close(self):
            s = open(self.script + ".in", "r").read()
            dirs = set([os.path.split(outfn)[0] for outfn in self.files.keys()])
            subst = {
                'target':self.target,
                'DirStatements':"\n".join([r'CreateDirectory $INSTDIR\%s'%d for d in dirs]),
                'FileStatements':"\n".join([r'File "/oname=$INSTDIR\%s" %s'%(outfn, infn) for outfn,infn in self.files.items()]),
            }
            open(self.script, "w").write(s % subst)
            assert 0 == os.system('"C:/Program Files (x86)/NSIS/makensis.exe" %s' % self.script)

    r = nsis_builder("ptracker-V%s.exe" % version, "ptracker.nsh") #zipfile.ZipFile("ptracker-V%s.zip" % version, "w")

    r.writestr(os.path.join("apps","python","ptracker","ptracker_lib","executable.py"),
               'ptracker_executable = ["apps/python/ptracker/dist/ptracker.exe"]\n'.encode(encoding="ascii"))

    files =( ptracker_py_files + ptracker_pyd_files
           + glob.glob("images/*.png")
           + glob.glob("images/*/*.png")
           + glob.glob("images/*/*.ini")
           + glob.glob("sounds/*.wav")
           + ["dist/ptracker.exe"]
           )

    icons = glob.glob("icons/*.png")

    http_static = (
              glob.glob("stracker/http_static/bootstrap/css/bootstrap.min.css")
            + glob.glob("stracker/http_static/bootstrap/css/bootstrap-datepicker.css")
            + glob.glob("stracker/http_static/bootstrap/css/bootstrap-multiselect.css")
            + glob.glob("stracker/http_static/bootstrap/css/bootstrap-theme.min.css")
            + glob.glob("stracker/http_static/bootstrap/css/custom.css")
            + glob.glob("stracker/http_static/bootstrap/css/fileinput.min.css")
            + glob.glob("stracker/http_static/bootstrap/css/sticky-footer.css")
            + glob.glob("stracker/http_static/bootstrap/fonts/glyphicons-halflings-regular.ttf")
            + glob.glob("stracker/http_static/bootstrap/js/bootstrap.min.js")
            + glob.glob("stracker/http_static/bootstrap/js/bootstrap-datepicker.js")
            + glob.glob("stracker/http_static/bootstrap/js/bootstrap-multiselect.js")
            + glob.glob("stracker/http_static/bootstrap/js/fileinput.min.js")
            + glob.glob("stracker/http_static/img/*.png")
            + glob.glob("stracker/http_static/jquery/jquery.min.js")
            + glob.glob("stracker/http_static/pygal/svg.jquery.js")
            + glob.glob("stracker/http_static/pygal/pygal-tooltips.js")
            )

    for f in files:
        t = os.path.join("apps", "python", "ptracker", f)
        print("adding",f,"as",t)
        r.write(f, t)

    for f in icons:
        t = os.path.join("content", "gui", f)
        print("adding",f,"as",t)
        r.write(f, t)

    for f in http_static:
        t = os.path.join("apps", "python", "ptracker", f[f.find("/")+1:])
        print("adding",f,"as",t)
        r.write(f, t)

    r.close()

# remove build / dist path
if os.path.exists("dist"):
    shutil.rmtree("dist")
if os.path.exists("build"):
    shutil.rmtree("build")

if not ptracker_only:

    os.chdir("stracker")
    if os.path.exists('dist'):
        shutil.rmtree('dist')

    r = zipfile.ZipFile("stracker-V%s.zip" % version, "w")
    
    if not linux_only and not stracker_packager_only:
        print("------------------- Building stracker.exe -------------------------------")
        assert 0 == os.system("pyinstaller --name stracker --clean -y --onefile --exclude-module http_templates --hidden-import cherrypy.wsgiserver.wsgiserver3 --hidden-import psycopg2 --additional-hooks-dir=pyinstaller-hooks\ --path .. --path externals stracker.py")
        #assert 0 == os.system("python setup-stracker.py py2exe")
        if os.path.exists('stracker-default.ini'):
            os.remove('stracker-default.ini')
        os.system(r"dist\stracker.exe --stracker_ini stracker-default.ini 2>null")
        r.write("stracker/dist/stracker.exe", "stracker.exe")
        r.write("stracker/stracker-default.ini", "stracker-default.ini")
        
    if not linux_only and not stracker_only:
        print("------------------- Building stracker-packager.exe ----------------------")
        assert 0 == os.system("pyinstaller --clean -y --onefile --path .. --path externals stracker-packager.py")
        #assert 0 == os.system("python -m py2exe.build_exe stracker-packager.py -OO -c --bundle-files 0 -i ctypes -x django")
        r.write("stracker/dist/stracker-packager.exe", "stracker-packager.exe")
    os.chdir("..")

    r.write("stracker/README.txt", "README.txt")
    r.write("stracker/start-stracker.cmd", "start-stracker.cmd")

    http_data = (glob.glob("stracker/http_static/bootstrap/*/*") +
                 glob.glob("stracker/http_static/img/*.png") +
                 glob.glob("stracker/http_static/jquery/*.js") +
                 glob.glob("stracker/http_static/pygal/*") +
                 glob.glob("stracker/http_templates/*.py"))
    for src in http_data:
        tgt = src[len("stracker/"):]
        print("adding",src,"as",tgt)
        r.write(src, tgt)

    if not windows_only:
        print(REMOTE_BUILD_CMD)
        rbuild_out = subprocess.check_output(REMOTE_BUILD_CMD, universal_newlines=True)
        if not REMOTE_COPY_RESULT is None:
            rcopy_out = subprocess.check_output(REMOTE_COPY_RESULT, universal_newlines=True)

        r.write("stracker/stracker_linux_x86.tgz", "stracker_linux_x86.tgz")
